# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

config.vm.define "kubemaster" do |kubemaster|
		kubemaster.vm.box = "bento/ubuntu-18.04"
		kubemaster.vm.network "private_network", ip: "192.168.33.15"
		kubemaster.vm.hostname = "kubemaster"
		config.vm.provider "virtualbox" do |vb|
			vb.memory = "4096"
			vb.cpus = "2"
			vb.name = "kubemaster"
		end
				
		config.vm.provision "shell", inline: <<-SHELL
		  sudo echo "192.168.33.16 kubenode1" >> /etc/hosts
		  sudo echo "192.168.33.17 kubenode2" >> /etc/hosts
		  sudo apt-get update
		  sudo apt-get remove -y docker docker-engine docker.io
		  sudo apt-get update
		  sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
		  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		  sudo apt-key fingerprint 0EBFCD88
		  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		  sudo apt-get update
		  sudo apt-get install -y docker-ce docker-ce-cli containerd.io
		  sudo docker -v
		  sudo apt-add-repository ppa:ansible/ansible
		  sudo apt-get update
		  sudo apt-get install ansible
		SHELL
		config.vm.provision “ansible” do |ansible|
			ansible.playbook = “playbook.yml”
		end
end

config.vm.define "kubenode1" do |kubenode1|
		#docker.vm.box = "ubuntu/trusty64"
		kubenode1.vm.box = "bento/ubuntu-18.04"
		kubenode1.vm.network "private_network", ip: "192.168.33.16"
		kubenode1.vm.hostname = "kubenode1"
		#config.vm.provision "shell", path: "LAMP.sh", privileged: false
		kubenode1.vm.provider "virtualbox" do |vb|
			vb.memory = "1024"
			vb.cpus = "1"
			vb.name = "kubenode1"
		end
		kubenode1.vm.provision "shell", inline: <<-SHELL
		sudo echo "192.168.33.15 kubemaster" >> /etc/hosts
		sudo echo "192.168.33.17 kubenode2" >> /etc/hosts
		
		SHELL
		
		#config.vm.provision "shell", inline: <<-SHELL
		#  sudo apt-get update
		#  sudo apt-get install -y apache2
		#  sudo apt-get install curl
		#  sudo apt-get remove -y docker docker-engine docker.io
		#  sudo apt-get update
		#  sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
		#  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		#  sudo apt-key fingerprint 0EBFCD88
		#  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		#  sudo apt-get update
		#  sudo apt-get install -y docker-ce
		#  docker run hello-world
		#SHELL
end

config.vm.define "kubenode2" do |kubenode2|
		kubenode2.vm.box = "bento/ubuntu-18.04"
		kubenode2.vm.network "private_network", ip: "192.168.33.17"
		kubenode2.vm.hostname = "kubenode2"
		kubenode2.vm.provider "virtualbox" do |vb|
			vb.memory = "1024"
			vb.cpus = "1"
			vb.name = "kubenode2"
		end
		kubenode2.vm.provision "shell", inline: <<-SHELL
		sudo echo "192.168.33.15 kubemaster" >> /etc/hosts
		sudo echo "192.168.33.16 kubenode1" >> /etc/hosts
		SHELL
		
		#config.vm.provision "shell", inline: <<-SHELL
		#  apt-get update
		#  apt-get install -y apache2
		#  apt-get remove -y docker docker-engine docker.io
		#  apt-get update
		#  apt-get install -y apt-transport-https ca-certificates curl software-properties-common
		#  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		#  apt-key fingerprint 0EBFCD88
		#  add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		#  apt-get update
		#  apt-get install -y docker-ce
		#  docker run hello-world
		#SHELL
end

	
config.vm.define "ansible2" do |ansible2|
		ansible2.vm.box = "bento/ubuntu-18.04"
		ansible2.vm.network "private_network", ip: "192.168.33.18"
		#ansible2.vm.network "public_network", ip: "192.168.33.18"
		ansible2.vm.hostname = "ansible2"
		ansible2.vm.provider "virtualbox" do |vb|
			vb.memory = "2048"
			vb.name = "ansible2"
		end
		ansible2.vm.provision "shell", inline: <<-SHELL
		sudo echo "192.168.33.15 docker" >> /etc/hosts
		sudo echo "192.168.33.16 kubenode1" >> /etc/hosts
		SHELL
		

end
